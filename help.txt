import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import NavyBackground from "../components/NavyBackground";
import Navbar from "../components/Navbar";
import {
  FileText,
  Eye,
  Copy,
  CheckCircle,
  Download,
  BarChart2,
  MessageCircle,
} from "lucide-react";

const OCRResultsPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [files, setFiles] = useState([]);
  const [selectedFile, setSelectedFile] = useState(null);
  const [ocrResults, setOcrResults] = useState({});
  const [isProcessing, setIsProcessing] = useState(true);
  const [copiedText, setCopiedText] = useState("");
  const [fileUrl, setFileUrl] = useState(null);
  const [activeTab, setActiveTab] = useState("results");
  const [downloadOpen, setDownloadOpen] = useState(false);

  // Load files from navigation state
  useEffect(() => {
    if (location.state && location.state.files) {
      setFiles(location.state.files);
      fetchOCRResults(location.state.files);
    } else {
      navigate("/upload");
    }
  }, [location.state, navigate]);

  // Generate file URL for preview
  useEffect(() => {
    if (selectedFile) {
      const url = URL.createObjectURL(selectedFile);
      setFileUrl(url);
      return () => URL.revokeObjectURL(url);
    }
  }, [selectedFile]);

  // Fetch OCR results from backend
  const fetchOCRResults = async (uploadedFiles) => {
    setIsProcessing(true);
    const results = {};

    for (let file of uploadedFiles) {
      try {
        const formData = new FormData();
        formData.append("file", file);

        const response = await fetch("http://127.0.0.1:8000/upload/", {
          method: "POST",
          body: formData,
        });
        const data = await response.json();

        results[file.name] = {
          text: data.extracted_text,
          confidence: data.confidence,
          pages: data.pages,
          pageConfidences: data.page_confidences,
        };
      } catch (err) {
        console.error("Error fetching OCR result for", file.name, err);
        results[file.name] = {
          text: "Failed to extract text.",
          confidence: 0,
          pages: 0,
          pageConfidences: [],
        };
      }
    }

    setOcrResults(results);
    setIsProcessing(false);
    if (uploadedFiles.length > 0) setSelectedFile(uploadedFiles[0]);
  };

  const copyToClipboard = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedText(text);
      setTimeout(() => setCopiedText(""), 2000);
    } catch (err) {
      console.error(err);
    }
  };

  const downloadFile = (filename, text, format) => {
    const type =
      format === "txt"
        ? "text/plain"
        : format === "docx"
        ? "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        : "application/pdf";
    const blob = new Blob([text], { type });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `${filename.replace(/\.[^/.]+$/, "")}_ocr.${format}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const getCurrentText = () => {
    if (!selectedFile || !ocrResults[selectedFile.name]) return "";
    return ocrResults[selectedFile.name].text;
  };

  if (files.length === 0) {
    return (
      <NavyBackground>
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center text-white">
            <h2 className="text-2xl font-bold mb-4">No files found</h2>
            <p className="mb-6">Please upload files first</p>
            <button
              onClick={() => navigate("/upload")}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg"
            >
              Go to Upload
            </button>
          </div>
        </div>
      </NavyBackground>
    );
  }

  return (
    <NavyBackground>
      <Navbar />
      <div className="flex w-full h-[calc(100vh-120px)]">
        {/* Left: File Preview */}
        <div className="w-1/2 h-full bg-gray-50 flex items-center justify-center">
          {isProcessing ? (
            <div className="flex flex-col items-center justify-center h-full">
              <div className="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mb-4"></div>
              <p className="text-gray-700">Processing file...</p>
            </div>
          ) : selectedFile ? (
            selectedFile.type.includes("pdf") ? (
              <iframe
                src={`${fileUrl}#navpanes=0&toolbar=0&scrollbar=0`}
                className="w-full h-full border-0"
                title={selectedFile.name}
              />
            ) : (
              <img
                src={fileUrl}
                alt={selectedFile.name}
                className="w-full h-full object-contain"
              />
            )
          ) : (
            <div className="text-gray-500">Select a file</div>
          )}
        </div>

        {/* Right: Tabs */}
        <div className="w-1/2 h-full flex flex-col bg-white">
          {/* Tab Buttons */}
          <div className="flex border-b">
            {[
              { id: "results", icon: FileText, label: "OCR Results" },
              { id: "chatbot", icon: MessageCircle, label: "Chatbot" },
              { id: "confidence", icon: BarChart2, label: "Confidence" },
            ].map(({ id, icon: Icon, label }) => (
              <button
                key={id}
                onClick={() => setActiveTab(id)}
                className={`flex-1 py-3 text-center ${
                  activeTab === id
                    ? "border-b-2 border-blue-600 text-blue-600 font-semibold"
                    : "text-gray-600 hover:text-gray-800"
                }`}
              >
                <Icon className="inline-block w-4 h-4 mr-1" /> {label}
              </button>
            ))}
          </div>

          {/* Tab Content */}
          <div className="flex-1 flex flex-col overflow-hidden p-4">
            {activeTab === "results" && selectedFile && (
              <>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold text-gray-800">
                    Extracted Text
                  </h3>
                  <div className="relative">
                    <button
                      onClick={() => setDownloadOpen(!downloadOpen)}
                      className="flex items-center text-gray-600 hover:text-gray-800"
                    >
                      <Download className="w-4 h-4 mr-1" /> Download
                    </button>
                    {downloadOpen && (
                      <div className="absolute right-0 mt-2 w-32 bg-white shadow-md rounded-lg border">
                        {["txt", "docx", "pdf"].map((format) => (
                          <button
                            key={format}
                            onClick={() =>
                              downloadFile(selectedFile.name, getCurrentText(), format)
                            }
                            className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                          >
                            {format.toUpperCase()}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                <pre className="whitespace-pre-wrap text-sm text-gray-800 font-mono bg-gray-50 p-3 rounded-lg border flex-1 overflow-y-auto">
                  {getCurrentText()}
                </pre>

                <button
                  onClick={() => copyToClipboard(getCurrentText())}
                  className="mt-3 flex items-center text-blue-600 hover:text-blue-700"
                >
                  {copiedText === getCurrentText() ? (
                    <CheckCircle className="w-4 h-4 mr-1" />
                  ) : (
                    <Copy className="w-4 h-4 mr-1" />
                  )}
                  {copiedText === getCurrentText() ? "Copied!" : "Copy to Clipboard"}
                </button>
              </>
            )}

            {activeTab === "chatbot" && (
              <div className="flex flex-col flex-1 overflow-hidden">
                <div className="flex-1 overflow-y-auto p-2 border rounded-lg bg-gray-50 mb-2">
                  <p className="text-gray-600">ðŸ’¬ Chatbot coming soon...</p>
                </div>
                <div className="flex">
                  <input
                    type="text"
                    placeholder="Ask something..."
                    className="flex-1 border rounded-l-lg px-3 py-2 text-sm"
                  />
                  <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 rounded-r-lg">
                    Send
                  </button>
                </div>
              </div>
            )}

            {activeTab === "confidence" && selectedFile && ocrResults[selectedFile.name] && (
              <div className="flex flex-col justify-center h-full">
                <h3 className="text-lg font-semibold mb-4">Confidence Level</h3>
                <div className="w-full bg-gray-200 rounded-full h-6">
                  <div
                    className="bg-green-500 h-6 rounded-full text-xs flex items-center justify-center text-white"
                    style={{
                      width: `${ocrResults[selectedFile.name].confidence}%`,
                    }}
                  >
                    {ocrResults[selectedFile.name].confidence.toFixed(2)}%
                  </div>
                </div>
                <div className="mt-4">
                  <h4 className="font-semibold mb-2">Page-wise Confidence:</h4>
                  <ul className="text-sm text-gray-700 list-disc list-inside">
                    {ocrResults[selectedFile.name].pageConfidences.map((p) => (
                      <li key={p.page}>
                        Page {p.page}: {p.confidence.toFixed(2)}%
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </NavyBackground>
  );
};

export default OCRResultsPage;


isme table or scroller nhi hai